1.
WITH RECURSIVE dates AS (
    SELECT 
        1 AS n,
        CURRENT_DATE AS random_date
    UNION ALL
    SELECT 
        n + 1,
        random_date + INTERVAL FLOOR(RAND() * 6) + 2 DAY AS random_date
    FROM dates
    WHERE n < 100
)

SELECT random_date
FROM dates;

==========================================================================
2.
WITH sales_ranking AS (
    SELECT
        e.id AS employee_id,
        e.name AS name,
        COUNT(s.id) AS sales_c,
        SUM(s.price) AS sales_s,
        RANK() OVER (ORDER BY COUNT(s.id) DESC) AS sales_rank_c,
        RANK() OVER (ORDER BY SUM(s.price) DESC) AS sales_rank_s
    FROM
        employee e
    LEFT JOIN sales s ON e.id = s.employee_id
    GROUP BY
        e.id, e.name
)

SELECT
    employee_id AS id,
    name,
    sales_c,
    sales_rank_c,
    sales_s,
    sales_rank_s
FROM
    sales_ranking
ORDER BY
    sales_rank_c;

==============================================================================
3.
SELECT 
    acc,
    DATE_FORMAT(dt_from, '%d.%m.%Y') AS dt_from,
    DATE_FORMAT(COALESCE(dt_to, '3000-01-01'), '%d.%m.%Y') AS dt_to,
    balance
FROM (
    SELECT 
        acc,
        dt_from,
        LEAD(dt_from) OVER (PARTITION BY acc ORDER BY dt_from) AS dt_to,
        SUM(amount) OVER (PARTITION BY acc ORDER BY dt_from) AS balance
    FROM (
        SELECT 
            from_account AS acc,
            tdate AS dt_from,
            -amount AS amount
        FROM transfers
        UNION ALL
        SELECT 
            to_account AS acc,
            tdate AS dt_from,
            amount AS amount
        FROM transfers
    ) AS subquery
) AS final_query
ORDER BY acc;
